{"version":3,"sources":["components/element/element.component.js","components/split-button/split-button.component.js","components/element-container/element-container.component.js","components/sorting/sorting.component.js","components/array-generator/array-generator.component.js","components/trees/bst/BinarySearchTree.js","components/trees/bst-node/bst-node.component.js","components/trees/bst/bst.component.js","components/trees/trees.component.js","components/navbar/navbar.component.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","Tooltip","title","number","arrow","placement","key","style","height","display","width","backgroundColor","boundaries","color","verticalAlign","border","options","SplitButton","React","useState","open","setOpen","anchorRef","useRef","selectedIndex","setSelectedIndex","handleClose","event","current","contains","target","Grid","container","direction","alignItems","item","xs","ButtonGroup","variant","ref","aria-label","Button","onClick","onGenerateNewArray","disabled","console","info","size","aria-controls","undefined","aria-expanded","aria-haspopup","prevOpen","handleSort","onStop","Popper","anchorEl","role","transition","disablePortal","TransitionProps","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","index","MenuItem","selected","handleMenuItemClick","ElementContainer","animate","timer","setInterval","state","setState","changes","length","slice","c","shift","array","colors","compared","clearInterval","isAnimating","speed","handleStop","bubbleSort","i","j","change","swapped","temp","tempc","push","isSorting","mergeSort","mergeSortRecur","Math","floor","tempArr","arr","begin","end","middle","merge","left","mid","right","left1","right1","leftEnd","getMaxIndex","index1","index2","selectionSort","minIndex","insertionSort","sortType","onSortComplete","generateNewArray","generateArray","arraySize","k","ki","randomColor","onSpeedChange","e","newValue","handleSliderChange","handleSortComplete","shouldSort","handleSpeedChange","log","sort","this","num","r","g","b","h","ceil","random","f","q","toString","children","value","enterTouchDelay","className","spacing","Typography","Slider","ValueLabelComponent","valueLabelComponent","defaultValue","onChange","min","max","marginLeft","document","body","clientWidth","total","multicolor","Set","has","sortingIndex","Component","Sorting","Container","maxWidth","ArrayGenerator","handleDistinctElelmentsChange","distinctElelments","checked","handleBalancedTreeChange","balancedTree","onBalancedTreeCheckBoxChange","generateArrayWithDistinctElelemts","label","FormGroup","row","FormControlLabel","control","Checkbox","name","data","count","add","Array","from","Node","x","y","parent","nodeId","BST","createBalancedTree","start","node","root","connections","newNode","insertNode","a","xi","insert","removeNode","minRight","findMinNode","Boolean","searchNode","drawTree","depth","BSTNodeComponent","top","nodeRef","BSTComponent","connectAll","startElement","childRefs","startElementId","endElement","endElementId","path","pathRefs","connectElements","dfs","setTimeout","paintNode","nodeCount","onDFSClick","render","paths","stack","cur","parentId","pop","elementId","pathId","d","stroke","fill","stroke-width","padding","svgContainerRef","createRef","connection","startX","startY","endX","endY","svg","parseFloat","getAttribute","setAttribute","deltaX","deltaY","delta","absolute","arc1","arc2","signum","startElem","endElem","svgContainer","svgCoords","ReactDOM","findDOMNode","getBoundingClientRect","startElementCoords","endElementCoords","svgTop","svgLeft","startCoord","endCoord","offsetWidth","offsetHeight","drawPath","Trees","tree","setTree","isBalancedtree","setIsBalancedtree","insertFromArray","draw","isChecked","Navbar","App","href","type","data-toggle","data-target","to","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16d89e19.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nfunction Element(props) {\r\n    return (\r\n            <Tooltip title={props.number} arrow placement=\"top\">\r\n                <div key={props.number} style={{\r\n                    height: `${props.number / 1.55}vh`, \r\n                    display:\"inline-block\",\r\n                    width:`${props.width}%`,\r\n                    backgroundColor: `${props.boundaries? \"#BA68C8\" : props.color}`,\r\n                    verticalAlign: \"bottom\",\r\n                    border: `${props.border ? '.5px solid #616161': 'none'}`\r\n\r\n                }}/>\r\n            </Tooltip>\r\n    );\r\n}\r\nexport default Element;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\n\r\nconst options = ['Bubble Sort', 'Quick Sort', 'Merge Sort', 'Selection Sort', 'Insertion Sort'];\r\n\r\nexport default function SplitButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={(event) => props.onGenerateNewArray()} disabled={props.disabled}>New Array</Button>\r\n          <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            aria-controls={open ? 'split-button-menu' : undefined}\r\n            aria-expanded={open ? 'true' : undefined}\r\n            aria-label=\"select sort\"\r\n            aria-haspopup=\"menu\"\r\n            onClick={handleToggle}\r\n          >\r\n            <ArrowDropDownIcon />\r\n          </Button>\r\n          <Button onClick={(event) => props.handleSort(options[selectedIndex])} disabled={props.disabled}>Sort</Button>\r\n          <Button onClick={(event) => props.onStop()}>Stop</Button>\r\n        </ButtonGroup>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{\r\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n              }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList id=\"split-button-menu\">\r\n                    {options.map((option, index) => (\r\n                      <MenuItem\r\n                        key={option}\r\n                        selected={index === selectedIndex}\r\n                        onClick={(event) => handleMenuItemClick(event, index)}\r\n                      >\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}","import React from 'react';\r\nimport Element from '../element/element.component';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport SplitButton from '../split-button/split-button.component'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass ElementContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let arraySize = 5;\r\n        let array = this.generateArray(arraySize);\r\n        this.state = {\r\n          arraySize: arraySize,\r\n          array: array,\r\n          isSorting: this.props.sort,\r\n          isAnimating: false,\r\n          changes:[],\r\n          colors:array.map((k,ki)=> {return this.randomColor()}),\r\n          compared:[],\r\n          sortType: 'Bubble Sort',\r\n          timer: null,\r\n          boundaries:[],\r\n          speed: 500\r\n        };\r\n        this.timer = null;\r\n      }\r\n      animate = () =>{\r\n        // const speed = 570 - Math.pow(this.state.array.length, 2) > 0 ? 570 - Math.pow(this.state.array.length, 2) : 0;\r\n        this.timer = setInterval(() => {\r\n            if(this.state.timer == null){\r\n                this.setState({timer: this.timer});\r\n            }\r\n            if(this.state.changes.length > 0){\r\n                let changes = this.state.changes.slice(0);\r\n                var c = changes.shift();\r\n                if(c != undefined){\r\n                    this.setState({changes: changes, array: c['array'].slice(0), colors: c['colors'], compared:c['compared'], boundaries: c['boundaries']});\r\n                }else{\r\n                    this.setState({changes: [], compared: [], boundaries:[]});\r\n                }\r\n            }else{\r\n                clearInterval(this.state.timer);\r\n                this.setState({compared:[], boundaries:[], isAnimating:false, timer: null});\r\n            }\r\n        }, this.state.speed);\r\n        \r\n      }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n    }\r\n\r\n    handleStop = () =>{\r\n        clearInterval(this.state.timer);\r\n        this.setState({timer:null});\r\n    }\r\n\r\n    bubbleSort = () =>{\r\n        let array = this.state.array.slice(0);\r\n        let colors = this.state.colors.slice(0);\r\n        let state = [];\r\n        for(let i = 0; i < array.length - 1; i++){\r\n          for(let j = 0; j < array.length - i - 1; j++){\r\n            let change = { \r\n              compared: [j, j + 1],\r\n              swapped: false,\r\n              array: array.slice(0),\r\n              colors: colors.slice(0),\r\n              boundaries:[]\r\n            };\r\n            if(array[j] > array[j + 1]){\r\n              change.swapped = true;\r\n              let temp = array[j]; \r\n              array[j] = array[j + 1]; \r\n              array[j + 1] = temp; \r\n\r\n              let tempc = colors[j]; \r\n              colors[j] = colors[j + 1]; \r\n              colors[j + 1] = tempc; \r\n\r\n              change.colors = colors.slice(0);\r\n              change.array = array.slice(0);\r\n            }\r\n            state.push(change);\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true, colors: colors});\r\n        }\r\n      }\r\n\r\n      mergeSort = () =>{\r\n        let state = [];\r\n        let array = this.state.array.slice(0);\r\n        let colors = this.state.colors.slice(0);\r\n        this.mergeSortRecur(array.slice(0), array, 0, array.length - 1, state);\r\n        let change = { \r\n            compared: [0, array.length - 1],\r\n            swapped: false,\r\n            array: array.slice(0),\r\n            colors: this.state.colors.slice(0),\r\n            boundaries: [0, Math.floor((0 + array.length - 1)/2), array.length - 1]\r\n          };\r\n          state.push(change);\r\n        this.setState({changes: state, isSorting: false, isAnimating:true, colors: colors});\r\n      }\r\n\r\n      mergeSortRecur = (tempArr, arr, begin, end, state) =>{\r\n          if(begin >= end) return;\r\n          let middle = Math.floor((begin + end) / 2);\r\n          this.mergeSortRecur(tempArr, arr, begin, middle, state);\r\n          this.mergeSortRecur(tempArr, arr, middle + 1, end, state);\r\n          this.merge(tempArr, arr, begin, middle + 1, end, state);\r\n          let change = { \r\n            compared: [begin, end],\r\n            swapped: false,\r\n            array: tempArr.slice(0),\r\n            colors: this.state.colors.slice(0),\r\n            boundaries: []\r\n          };\r\n          state.push(change);\r\n      }\r\n\r\n      merge = (temp, arr, left, mid, right, state) =>{\r\n        const left1 = left;\r\n        const right1 = right;\r\n        let leftEnd = mid - 1;\r\n        //let rightStart = leftEnd + 1;\r\n        let size = right - left + 1;\r\n        let index = left;\r\n\r\n        while(left <= leftEnd && mid <= right){\r\n            let change = { \r\n                compared: [],\r\n                swapped: false,\r\n                array: arr.slice(0),\r\n                colors: this.state.colors.slice(0),\r\n                boundaries: [left1, mid, right1]\r\n              };\r\n\r\n            if(arr[left] <= arr[mid]){\r\n                change.swapped = true;\r\n                temp[index] = arr[left];\r\n                change.compared = [left, mid];\r\n                change.array = temp.slice(0);\r\n                index++;\r\n                left++;\r\n            }\r\n            else{\r\n                change.swapped = true;\r\n                temp[index] = arr[mid];\r\n                change.compared = [mid, right];\r\n                change.array = temp.slice(0);;\r\n                index++;\r\n                mid++;\r\n            }  \r\n            state.push(change);\r\n        }\r\n        while(left <= leftEnd)\r\n            temp[index++] = arr[left++];\r\n        \r\n        while(mid <= right)\r\n            temp[index++] = arr[mid++];\r\n        for(let i = 0; i < size; i++)\r\n            arr[right] = temp[right--];\r\n      }\r\n\r\n      getMaxIndex = () =>{\r\n          if(this.state.compared.length > 0){\r\n              let index1 = this.state.compared[0];\r\n              let index2 = this.state.compared[1];\r\n              return this.state.array[index1] > this.state.array[index2] ? index1 : index2;\r\n          }\r\n          return -1;\r\n      }\r\n      selectionSort = () =>{\r\n          let state = [];\r\n          let array = this.state.array.slice(0);\r\n          for(let i = 0; i < array.length - 1; i++){\r\n              let minIndex = i;\r\n              for(let j = i + 1; j < array.length; j++){\r\n                if(array[j] < array[minIndex])\r\n                    minIndex = j;\r\n              }\r\n              \r\n              let temp = array[i];\r\n              array[i] = array[minIndex];\r\n              array[minIndex] = temp;\r\n\r\n              let change = { \r\n                compared: [i, minIndex],\r\n                swapped: false,\r\n                array: array.slice(0),\r\n                boundaries:[]\r\n              };\r\n              state.push(change);\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true});\r\n      }\r\n\r\n      insertionSort = () =>{\r\n          let state = [];\r\n          let array = this.state.array.slice(0);\r\n          for(let i = 1 ; i < array.length; i++){\r\n            let j = i;\r\n              while(j > 0 && array[j -1] > array[j]){\r\n                  let temp = array[j];\r\n                  array[j] = array[j - 1];\r\n                  array[j -1] = temp;\r\n                  j--;\r\n                  let change = { \r\n                    compared: [j-1, j],\r\n                    swapped: false,\r\n                    array: array.slice(0),\r\n                    boundaries:[]\r\n                  };\r\n                  state.push(change);\r\n              }\r\n              \r\n\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true});\r\n      }\r\n\r\n     randomColor(num) {\r\n     \r\n        // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\r\n        // Adam Cole, 2011-Sept-14\r\n        // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n        var r, g, b;\r\n        var h = Math.ceil(Math.random() * 10000) / Math.ceil(Math.random() * 9799);\r\n        var i = ~~(h * 6);\r\n        var f = h * 6 - i;\r\n        var q = 1 - f;\r\n        switch(i % 6){\r\n            case 0: r = 1; g = f; b = 0; break;\r\n            case 1: r = q; g = 1; b = 0; break;\r\n            case 2: r = 0; g = 1; b = f; break;\r\n            case 3: r = 0; g = q; b = 1; break;\r\n            case 4: r = f; g = 0; b = 1; break;\r\n            case 5: r = 1; g = 0; b = q; break;\r\n        }\r\n        var c = \"#\" + (\"00\" + (~ ~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 255)).toString(16)).slice(-2);\r\n        return (c);\r\n    }\r\n\r\n    handleSort = (sortType) => {\r\n        switch(sortType){\r\n            case 'Bubble Sort':\r\n                this.bubbleSort();\r\n                break;\r\n            case 'Merge Sort':\r\n                this.mergeSort();\r\n                break;\r\n            case 'Selection Sort':\r\n                this.selectionSort();\r\n                break;\r\n            case 'Insertion Sort':\r\n                this.insertionSort();\r\n                break;\r\n        }\r\n        this.animate();\r\n    }\r\n    onSortComplete = () =>{\r\n        this.setState({});\r\n    }\r\n    valueLabelComponent(props) {\r\n        const { children, open, value } = props;\r\n      \r\n        return (\r\n          <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n          </Tooltip>\r\n        );\r\n    }\r\n\r\n    generateArray(size){\r\n        let array = [];\r\n        for(let i = 0; i < size; i++){\r\n          array.push(Math.ceil(Math.random() * (125 - 50) + 50));\r\n        }\r\n        return array;\r\n    }\r\n\r\n    generateNewArray = () =>{\r\n        let array = this.generateArray(this.state.arraySize);\r\n        this.setState(\r\n        {\r\n            array: array,\r\n            colors: array.map((k,ki)=> {return this.randomColor();})\r\n        });\r\n    }\r\n    onSpeedChange = (e, newValue) =>{\r\n        this.setState({speed: 2000-newValue})\r\n    }\r\n\r\n    handleSliderChange = (e, newValue) =>{\r\n        let array = this.generateArray(newValue);\r\n        this.setState({\r\n            array: array,\r\n            arraySize: newValue,\r\n            colors: array.map((k,ki)=> {return this.randomColor();})\r\n        });\r\n    }\r\n    handleSortComplete = ()=>{\r\n        this.setState({isSorting: false, shouldSort: false})\r\n    }\r\n    handleSpeedChange = (e, newValue) =>{\r\n        console.log(newValue)\r\n        this.setState({speed: newValue});\r\n    }\r\n    render(){\r\n        // console.log({\"render\":this.props.sort})\r\n        const boundaries = this.state.boundaries == undefined ? [] : this.state.boundaries;\r\n        return (<div className=\"element-container\">\r\n            <div className='controls'>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <Typography>Array Size</Typography>\r\n                    <Slider\r\n                        ValueLabelComponent={this.valueLabelComponent}\r\n                        className=\"slider-comp\"\r\n                        aria-label=\"custom thumb label\"\r\n                        disabled={this.state.isAnimating}\r\n                        defaultValue={5}\r\n                        onChange={this.handleSliderChange}\r\n                        min={5}\r\n                        max={200}\r\n                        style={{marginLeft:\"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Typography>Speed</Typography>\r\n                    <Slider\r\n                        ValueLabelComponent={this.valueLabelComponent}\r\n                        className=\"slider-comp\"\r\n                        disabled={this.state.isAnimating}\r\n                        aria-label=\"custom thumb label\"\r\n                        defaultValue={500}\r\n                        onChange={this.onSpeedChange}\r\n                        min={1}\r\n                        max={2000}\r\n                        style={{marginLeft:\"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <SplitButton \r\n                    disabled={this.state.isAnimating}\r\n                    handleSort={this.handleSort} \r\n                    onGenerateNewArray={this.generateNewArray} \r\n                    onStop={this.handleStop}/>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            <div >\r\n                <div className='elements'>\r\n                {this.state.array.map((k,ki)=>{\r\n                    return <Element key={ki} number={k} \r\n                    width={(document.body.clientWidth / (this.state.array.length * 1.95))/10} \r\n                    total={this.state.array.length}\r\n                    color = {this.props.multicolor? this.state.colors[ki]: '#f36698'}\r\n                    border={!this.props.multicolor}\r\n                    compared={new Set(this.state.compared).has(ki)}\r\n                    sortingIndex={this.getMaxIndex() == ki}\r\n                    boundaries={boundaries.length > 0 ? (ki >= boundaries[0] && ki <= boundaries[2]) : false}\r\n                    />\r\n                    \r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n\r\n      \r\n   \r\n   \r\n}\r\nexport default ElementContainer;","import React from 'react';\r\nimport ElementContainer from '../element-container/element-container.component'\r\nimport Container from '@material-ui/core/Container';\r\nfunction Sorting(props) {\r\n  return (\r\n    <Container maxWidth={false}>\r\n        <ElementContainer multicolor={false}/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Sorting;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nclass ArrayGenerator extends React.Component { \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            distinctElelments: true,\r\n            balancedTree: false\r\n        };\r\n    }\r\n    render(){\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <Typography>{this.props.label}</Typography>\r\n                    <Slider\r\n                        ValueLabelComponent={this.valueLabelComponent}\r\n                        className={this.props.className}\r\n                        aria-label=\"custom thumb label\"\r\n                        disabled={this.props.disabled}\r\n                        onChange={this.handleSliderChange}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        style={this.props.style}\r\n                        \r\n                        defaultValue={this.props.defaultValue}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <FormGroup row>\r\n                        <FormControlLabel\r\n                            control={\r\n                            <Checkbox\r\n                                checked={this.state.distinctElelments}\r\n                                onChange={this.handleDistinctElelmentsChange}\r\n                                name=\"distinctElelments\"\r\n                                color=\"primary\"\r\n                            />\r\n                            }\r\n                            label=\"Distinct Elements\"\r\n                        />\r\n                    </FormGroup>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <FormGroup row>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={this.state.balancedTree}\r\n                                    onChange={this.handleBalancedTreeChange}\r\n                                    name=\"distinctElelments\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Balanced Tree\"\r\n                        />\r\n                    </FormGroup>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n    handleDistinctElelmentsChange = (e) =>{\r\n        this.setState({ distinctElelments: e.target.checked });\r\n    }\r\n    handleBalancedTreeChange = (e) =>{\r\n        this.setState({ balancedTree: e.target.checked });\r\n        this.props.onBalancedTreeCheckBoxChange(e.target.checked);\r\n    }\r\n    generateArray(size){\r\n        let array = [];\r\n        for(let i = 0; i < size; i++){\r\n          array.push(Math.ceil(Math.random() * (this.props.max - this.props.min) + this.props.min));\r\n        }\r\n        return array;\r\n    }\r\n    generateArrayWithDistinctElelemts(size){\r\n        let data = new Set();\r\n        let count = size;\r\n        while(count > 0){\r\n            let number = Math.ceil(Math.random() * (500 - 1) + 1);\r\n            if(data.has(number)){\r\n                continue;\r\n            }else{\r\n                data.add(number);\r\n                count--;\r\n            }\r\n        }\r\n        return Array.from(data);\r\n    }\r\n    handleSliderChange = (e, newValue) =>{\r\n        var array = [];\r\n        if(this.state.distinctElelments){\r\n            array = this.generateArrayWithDistinctElelemts(newValue);\r\n        }else{\r\n            array = this.generateArray(newValue);\r\n        }\r\n        \r\n        this.props.onChange(e, newValue, array);\r\n    }\r\n    valueLabelComponent(props) {\r\n        const { children, open, value } = props;\r\n      \r\n        return (\r\n          <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n          </Tooltip>\r\n        );\r\n    }\r\n  \r\n}\r\n\r\nexport default ArrayGenerator;\r\n","export class Node { \r\n    constructor(data) { \r\n      this.left = null\r\n      this.right = null\r\n      this.value = data\r\n      this.x = 0\r\n      this.y = 0\r\n      this.parent = null;\r\n      this.nodeId = null;\r\n    } \r\n  } \r\n\r\n  export class BST {\r\n    constructor() {\r\n      this.root = null;\r\n      this.i = 0;\r\n      this.connections = [];\r\n    }\r\n    \r\n    // Insert a value as a node in the BST\r\n    insert(value) {\r\n      let newNode = new Node(value)\r\n      \r\n      // If root empty, set new node as the root\r\n      if (!this.root) {\r\n        this.root = newNode\r\n      } else {\r\n        this.insertNode(this.root, newNode)\r\n      }\r\n    }\r\n\r\n    insertFromArray(arr, balancedTree) {\r\n        if(balancedTree){\r\n            arr.sort((a,b)=>a-b)\r\n            console.log(arr)\r\n            this.root = this.createBalancedTree(arr, 0 , arr.length - 1, this.root);\r\n        }else{\r\n            arr.map((x,xi)=>{\r\n                this.insert(x);\r\n            })\r\n        }\r\n        console.log(balancedTree);\r\n        return this;\r\n    }\r\n\r\n    createBalancedTree = (arr, start, end, parent) =>{\r\n        if(start > end) return null;\r\n        let mid = Math.floor((start + end) / 2);\r\n        var node = new Node(arr[mid]) \r\n        node.parent = parent;\r\n        node.left = this.createBalancedTree(arr, start, mid - 1, node);\r\n        if(node.left != null){\r\n            node.left.parent = node;\r\n        }\r\n        \r\n        \r\n        node.right = this.createBalancedTree(arr, mid + 1, end, node);\r\n        if(node.right != null){\r\n            node.right.parent = node;\r\n        }\r\n        return node;\r\n    }\r\n    \r\n    // helper function\r\n    insertNode(root, newNode) {\r\n      if (newNode.value < root.value) {\r\n        // If no left child, then just insesrt to the left\r\n        if (!root.left) {\r\n          root.left = newNode\r\n          root.left.parent = root\r\n        } else {\r\n          this.insertNode(root.left, newNode)\r\n        }\r\n      } else {\r\n        // If no right child, then just insesrt to the right\r\n        if (!root.right) {\r\n          root.right = newNode\r\n          root.right.parent = root\r\n        } else {\r\n          this.insertNode(root.right, newNode)\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Remove a node with the value passed\r\n    remove(value) {\r\n      if (!this.root) {\r\n        return 'Tree is empty!'\r\n      } else {\r\n        this.removeNode(this.root, value)\r\n      }\r\n    }\r\n    \r\n    // helper function\r\n    removeNode(root, value) {\r\n      if (!root) {\r\n        return null\r\n      }\r\n      \r\n      // If value is less than root value, go to the left subtree\r\n      if (value < root.value) {\r\n        root.left = this.removeNode(root.left, value)\r\n        return root\r\n      // If value is greater than root value, go to the right subtree\r\n      } else if (value > root.value) {\r\n        root.right = this.removeNode(root.right, value)\r\n        return root\r\n      // If we found the value, remove the node\r\n      } else {\r\n        // If no child nodes, just remove the node\r\n        if (!root.left && !root.right) {\r\n          root = null\r\n          return root\r\n        }\r\n        \r\n        // If one child (left)\r\n        if (root.left) {\r\n          root = root.left\r\n          return root\r\n        // If one child (right)\r\n        } else if (root.right) {\r\n          root = root.right\r\n          return root\r\n        }\r\n        \r\n        // If two child nodes (both)\r\n        // Get the minimum of the right subtree to ensure we have valid replacement\r\n        let minRight = this.findMinNode(root.right)\r\n        root.value = minRight.value\r\n        \r\n        // Make sure we remove the node that we replaced the deleted node\r\n        root.right = this.removeNode(root.right, minRight.value)\r\n        return root\r\n      }\r\n    }\r\n    \r\n    findMinNode(root) {\r\n      if (!root.left) {\r\n        return root\r\n      } else {\r\n        return this.findMinNode(root.left)\r\n      }\r\n    }\r\n    \r\n    // Return boolean value depending on the existence of the value in the tree\r\n    search(value) {\r\n      if (!this.root) {\r\n        return 'Tree is empty'\r\n      } else {\r\n        return Boolean(this.searchNode(this.root, value))\r\n      }\r\n    }\r\n    \r\n    searchNode(root, value) {\r\n      if (!root) {\r\n        return null\r\n      }\r\n      \r\n      if (value < root.value) {\r\n        return this.searchNode(root.left, value)\r\n      } else if (value > root.value) {\r\n        return this.searchNode(root.right, value)\r\n      }\r\n      \r\n      return root\r\n    }\r\n\r\n    draw(){\r\n      this.drawTree(this.root, 0);\r\n      return this.root;\r\n    }\r\n\r\n    drawTree(root, depth){\r\n      if(root == null)return;\r\n      if(root.left != null){\r\n        this.drawTree(root.left, depth + 1);\r\n      }\r\n      root.x = ++this.i;\r\n      root.y = depth;\r\n      if(root.right != null){\r\n        this.drawTree(root.right, depth + 1);\r\n      }\r\n    }\r\n  }\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nclass BSTNodeComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={}\r\n  }\r\n    //let id = `node-${props.value}-depth-${props.depth}`;\r\n    render(){\r\n\r\n    \r\n      let style = {\r\n        top: `${this.props.node.y* 55}px`,\r\n        left:`${this.props.node.x * 25}px`\r\n      }\r\n    return (\r\n      <div>\r\n        <div ref={this.props.nodeRef} id={this.props.key} className='node' style={style}>\r\n            {this.props.node.value}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BSTNodeComponent;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport BSTNodeComponent from '../bst-node/bst-node.component'\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nclass BSTComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var connections = [];\r\n        var childRefs = {};\r\n        var pathRefs = {};\r\n        var count = 0;\r\n        this.svgContainerRef = React.createRef();\r\n        let stack = [];\r\n        let cur = this.props.root;\r\n        while(cur != null || stack.length > 0){\r\n          while(cur != null){\r\n            stack.push(cur);\r\n            cur = cur.left;\r\n          }\r\n          cur = stack.pop();\r\n          cur = stack.pop();\r\n          let parentId = cur.parent == null ? null :  `node-${cur.parent.value}-depth-${cur.parent.y}`;\r\n          let elementId = `node-${cur.value}-depth-${cur.y}`;\r\n          cur.nodeId = elementId;\r\n          if(parentId != null){\r\n            var pathId = `node-${cur.value}-depth-${cur.y}-to-${parentId}`;\r\n            pathRefs[pathId] = React.createRef();\r\n            var connection = {\r\n                path:pathId,\r\n                startElementId: parentId,\r\n                endElementId:  elementId\r\n              }\r\n              connections.push(connection);\r\n          }\r\n          count++;\r\n          childRefs[elementId] = React.createRef();\r\n          cur = cur.right;\r\n        }\r\n        this.state = {\r\n          connections: connections,\r\n          root: props.root,\r\n          childRefs: childRefs,\r\n          pathRefs: pathRefs,\r\n          nodeCount: count\r\n        };\r\n        this.count = count;\r\n    }\r\n    \r\n    signum(x) {\r\n        return (x < 0) ? -1 : 1;\r\n    }\r\n    absolute(x) {\r\n        return (x < 0) ? -x : x;\r\n    }\r\n    drawPath(path, startX, startY, endX, endY) {\r\n        const svg = this.svgContainerRef.current;\r\n        const stroke =  parseFloat(path.getAttribute(\"stroke-width\"));\r\n        if (svg.getAttribute(\"height\") <  endY)                 svg.setAttribute(\"height\", endY);\r\n        if (svg.getAttribute(\"width\" ) < (startX + stroke) )    svg.setAttribute(\"width\", (startX + stroke));\r\n        if (svg.getAttribute(\"width\" ) < (endX   + stroke) )    svg.setAttribute(\"width\", (endX   + stroke));\r\n        \r\n        const deltaX = (endX - startX) * 0.15;\r\n        const deltaY = (endY - startY) * 0.15;\r\n        const delta  =  deltaY < this.absolute(deltaX) ? deltaY : this.absolute(deltaX);\r\n        let arc1 = 0; let arc2 = 1;\r\n        if (startX > endX) {\r\n            arc1 = 1;\r\n            arc2 = 0;\r\n        }\r\n        path.setAttribute(\"d\",  \"M\"  + startX + \" \" + startY +\r\n                        \" V\" + (startY + delta) +\r\n                        \" A\" + delta + \" \" +  delta + \" 0 0 \" + arc1 + \" \" + (startX + delta*this.signum(deltaX)) + \" \" + (startY + 2*delta) +\r\n                        \" H\" + (endX - delta*this.signum(deltaX)) + \r\n                        \" A\" + delta + \" \" +  delta + \" 0 0 \" + arc2 + \" \" + endX + \" \" + (startY + 3*delta) +\r\n                        \" V\" + endY );\r\n    }\r\n\r\n    connectElements(path, startElem, endElem) {\r\n        const svgContainer= this.svgContainerRef.current;\r\n        const svgCoords = ReactDOM.findDOMNode(svgContainer).getBoundingClientRect();\r\n        const startElementCoords = ReactDOM.findDOMNode(startElem).getBoundingClientRect();\r\n        const endElementCoords = ReactDOM.findDOMNode(startElem).getBoundingClientRect();\r\n        if(startElementCoords.top > endElementCoords.top){\r\n            var temp = startElem;\r\n            startElem = endElem;\r\n            endElem = temp;\r\n        }\r\n        const svgTop  = svgCoords.top;\r\n        const svgLeft = svgCoords.left;\r\n        const startCoord = ReactDOM.findDOMNode(startElem).getBoundingClientRect();\r\n        const endCoord   = ReactDOM.findDOMNode(endElem).getBoundingClientRect();\r\n        const startX = startCoord.left + 0.5*startElem.offsetWidth  - svgLeft;   \r\n        const startY = startCoord.top  + startElem.offsetHeight - svgTop;    \r\n        const endX = endCoord.left + 0.5*endElem.offsetWidth - svgLeft;\r\n        const endY = endCoord.top  - svgTop;\r\n        this.drawPath(path, startX, startY, endX, endY);\r\n    \r\n    }\r\n\r\n    connectAll = () => {\r\n        this.state.connections.map((x,xi)=>{\r\n            var startElement = this.state.childRefs[x.startElementId].current;\r\n            var endElement = this.state.childRefs[x.endElementId].current;\r\n            var path = this.state.pathRefs[x.path].current;\r\n            this.connectElements(path, startElement, endElement);\r\n        });\r\n    }\r\n\r\n    dfs = (root) =>{\r\n        console.log(this.count)\r\n        if(root == null) return;\r\n        this.dfs(root.left)\r\n        setTimeout(() =>this.paintNode(root.nodeId), ((this.state.nodeCount - this.count) + 1) *500)\r\n        this.count--;\r\n        this.dfs(root.right)\r\n    }\r\n    paintNode = (id) =>{\r\n        let ref = this.state.childRefs[id];\r\n        ref.current.style.backgroundColor = \"#dea805\"; \r\n        ref.current.style.color = \"#065a65\";\r\n    }\r\n    onDFSClick = () =>{\r\n        this.count = this.state.nodeCount;\r\n        this.dfs(this.state.root);\r\n    }\r\n    componentDidUpdate(){\r\n        this.connectAll();\r\n    }\r\n    componentDidMount(){\r\n        this.connectAll();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.root !== state.root) {\r\n            var connections = [];\r\n            var childRefs = {};\r\n            var pathRefs = {};\r\n            let stack = [];\r\n            var count = 0;\r\n            let cur = props.root;\r\n            while(cur != null || stack.length > 0){\r\n                while(cur != null){\r\n                    stack.push(cur);\r\n                    cur = cur.left;\r\n                }\r\n                cur = stack.pop();\r\n                    let parentId = cur.parent == null ? null :  `node-${cur.parent.value}-depth-${cur.parent.y}`;\r\n                    let elementId = `node-${cur.value}-depth-${cur.y}`;\r\n                    cur.nodeId = elementId;\r\n                    if(parentId != undefined){\r\n                        var pathId = `node-${cur.value}-depth-${cur.y}-to-${parentId}`;\r\n                        pathRefs[pathId] = React.createRef();\r\n                        var connection = {\r\n                            path:pathId,\r\n                            startElementId: parentId,\r\n                            endElementId:  elementId\r\n                        }\r\n                        connections.push(connection);\r\n                    }\r\n                    childRefs[elementId] = React.createRef();\r\n                    count++;\r\n                    cur = cur.right;\r\n                \r\n            }\r\n            return {\r\n                root: props.root,\r\n                childRefs: childRefs,\r\n                pathRefs: pathRefs,\r\n                connections: connections,\r\n                nodeCount: count\r\n            };\r\n        }\r\n        return null;\r\n      }\r\n\r\n      render =()=>{\r\n        var children = [];\r\n        var paths = [];\r\n        let root = this.state.root;\r\n        let stack = [];\r\n       \r\n        let cur = root;\r\n        while(cur != null || stack.length > 0){\r\n          while(cur != null){\r\n            stack.push(cur);\r\n            cur = cur.left;\r\n          }\r\n          cur = stack.pop();\r\n          let parentId = cur.parent == null ? null :  `node-${cur.parent.value}-depth-${cur.parent.y}`;\r\n          let elementId = `node-${cur.value}-depth-${cur.y}`;\r\n          cur.nodeId = elementId;\r\n          if(parentId != null){\r\n            var pathId = `node-${cur.value}-depth-${cur.y}-to-${parentId}`;\r\n            paths.push(<path ref={this.state.pathRefs[pathId]} id={pathId} d=\"M0 0\" stroke=\"#014048\" fill=\"none\" stroke-width=\"1px\"/>);\r\n          }\r\n            children.push(<BSTNodeComponent key={elementId} node={cur} nodeRef={this.state.childRefs[elementId]} id={elementId} />);\r\n            \r\n            cur = cur.right;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div style={{padding:\"10px\"}}>\r\n                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                        <Button onClick={this.onDFSClick} disabled={this.state.root == null}>DFS</Button>\r\n                        <Button disabled={this.state.root == null}>BFS</Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                <div className='outer' id=\"svgContainer\">\r\n                    <svg  ref={this.svgContainerRef} id=\"svg1\" width=\"0\" height=\"0\" >\r\n                        {paths}\r\n                    </svg>\r\n                </div>\r\n                <div className='tree'>{children}</div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default BSTComponent;","import React, { useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport ArrayGenerator from '../array-generator/array-generator.component';\r\nimport { BST } from '../trees/bst/BinarySearchTree'\r\nimport BSTComponent from '../trees/bst/bst.component'\r\nfunction Trees(props) {\r\n  const [tree, setTree] = useState(null);\r\n  const [isBalancedtree, setIsBalancedtree] = useState(false);\r\n  return (\r\n    <Container maxWidth={false}>\r\n        <div>\r\n          <div className='controls'>\r\n            <ArrayGenerator \r\n              min={0} \r\n              max={100} \r\n              onChange={(e, newValue, array) => setTree(new BST().insertFromArray(array, isBalancedtree).draw())} \r\n              onBalancedTreeCheckBoxChange={(isChecked) => setIsBalancedtree(isChecked)}\r\n              className=\"slider-comp\"\r\n              disabled={false}\r\n              label=\"Array Size\"\r\n              defaultValue={0}\r\n              style={{marginLeft:\"5px\"}}/>\r\n            </div>\r\n            <div className='tree-cointainer'>\r\n              <BSTComponent root={tree} />\r\n            </div>\r\n            \r\n        </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Trees;\r\n","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SplitButton from '../split-button/split-button.component'\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n  \r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Sorting</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                \r\n                \r\n                \r\n            </ul>\r\n\r\n        </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Sorting from './components/sorting/sorting.component'\r\nimport Trees from './components/trees/trees.component'\r\nimport './App.css';\r\nimport Navbar from './components/navbar/navbar.component'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Sorting</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/sorting\">Sorting</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/trees\">Trees</Link>\r\n              </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n       \r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/sorting\">\r\n            <Sorting />\r\n          </Route>\r\n          <Route path=\"/trees\">\r\n            <Trees />\r\n          </Route>\r\n          {/* <Route path=\"/\">\r\n            <Home />\r\n          </Route> */}\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}