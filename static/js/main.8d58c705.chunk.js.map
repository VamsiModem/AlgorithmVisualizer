{"version":3,"sources":["components/split-button/split-button.component.js","components/navbar/navbar.component.js","components/element/element.component.js","components/element-container/element-container.component.js","App.js","serviceWorker.js","index.js"],"names":["options","SplitButton","props","React","useState","open","setOpen","anchorRef","useRef","selectedIndex","setSelectedIndex","handleClose","event","current","contains","target","Grid","container","direction","alignItems","item","xs","ButtonGroup","variant","color","ref","aria-label","Button","onClick","onGenerateNewArray","disabled","console","info","size","aria-controls","undefined","aria-expanded","aria-haspopup","prevOpen","handleSort","onStop","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","index","MenuItem","key","selected","handleMenuItemClick","Navbar","className","href","type","data-toggle","data-target","Element","Tooltip","title","number","arrow","height","display","width","backgroundColor","boundaries","verticalAlign","border","ElementContainer","animate","timer","setInterval","state","setState","changes","length","slice","c","shift","array","colors","compared","clearInterval","isAnimating","speed","handleStop","bubbleSort","i","j","change","swapped","temp","tempc","push","isSorting","mergeSort","mergeSortRecur","Math","floor","tempArr","arr","begin","end","middle","merge","left","mid","right","left1","right1","leftEnd","getMaxIndex","index1","index2","selectionSort","minIndex","insertionSort","sortType","onSortComplete","generateNewArray","generateArray","arraySize","k","ki","randomColor","onSpeedChange","e","newValue","handleSliderChange","handleSortComplete","shouldSort","handleSpeedChange","log","sort","this","num","r","g","b","h","ceil","random","f","q","toString","children","value","enterTouchDelay","spacing","Typography","Slider","ValueLabelComponent","valueLabelComponent","defaultValue","onChange","min","max","marginLeft","document","body","clientWidth","total","multicolor","Set","has","sortingIndex","Component","App","onSort","onSliderChange","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d58c705.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\n\r\nconst options = ['Bubble Sort', 'Quick Sort', 'Merge Sort', 'Selection Sort', 'Insertion Sort'];\r\n\r\nexport default function SplitButton(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={(event) => props.onGenerateNewArray()} disabled={props.disabled}>New Array</Button>\r\n          <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            aria-controls={open ? 'split-button-menu' : undefined}\r\n            aria-expanded={open ? 'true' : undefined}\r\n            aria-label=\"select sort\"\r\n            aria-haspopup=\"menu\"\r\n            onClick={handleToggle}\r\n          >\r\n            <ArrowDropDownIcon />\r\n          </Button>\r\n          <Button onClick={(event) => props.handleSort(options[selectedIndex])} disabled={props.disabled}>Sort</Button>\r\n          <Button onClick={(event) => props.onStop()}>Stop</Button>\r\n        </ButtonGroup>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{\r\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n              }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList id=\"split-button-menu\">\r\n                    {options.map((option, index) => (\r\n                      <MenuItem\r\n                        key={option}\r\n                        selected={index === selectedIndex}\r\n                        onClick={(event) => handleMenuItemClick(event, index)}\r\n                      >\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}","import React from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SplitButton from '../split-button/split-button.component'\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n  \r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Sorting</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n                \r\n                \r\n                \r\n            </ul>\r\n\r\n        </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nfunction Element(props) {\r\n    return (\r\n            <Tooltip title={props.number} arrow placement=\"top\">\r\n                <div key={props.number} style={{\r\n                    height: `${props.number / 1.55}vh`, \r\n                    display:\"inline-block\",\r\n                    width:`${props.width}%`,\r\n                    backgroundColor: `${props.boundaries? \"#BA68C8\" : props.color}`,\r\n                    verticalAlign: \"bottom\",\r\n                    border: `${props.border ? '.5px solid #616161': 'none'}`\r\n\r\n                }}/>\r\n            </Tooltip>\r\n    );\r\n}\r\nexport default Element;","import React from 'react';\r\nimport Element from '../element/element.component';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport SplitButton from '../split-button/split-button.component'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass ElementContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let arraySize = 5;\r\n        let array = this.generateArray(arraySize);\r\n        this.state = {\r\n          arraySize: arraySize,\r\n          array: array,\r\n          isSorting: this.props.sort,\r\n          isAnimating: false,\r\n          changes:[],\r\n          colors:array.map((k,ki)=> {return this.randomColor()}),\r\n          compared:[],\r\n          sortType: 'Bubble Sort',\r\n          timer: null,\r\n          boundaries:[],\r\n          speed: 500\r\n        };\r\n        this.timer = null;\r\n      }\r\n      animate = () =>{\r\n        // const speed = 570 - Math.pow(this.state.array.length, 2) > 0 ? 570 - Math.pow(this.state.array.length, 2) : 0;\r\n        this.timer = setInterval(() => {\r\n            if(this.state.timer == null){\r\n                this.setState({timer: this.timer});\r\n            }\r\n            if(this.state.changes.length > 0){\r\n                let changes = this.state.changes.slice(0);\r\n                var c = changes.shift();\r\n                if(c != undefined){\r\n                    this.setState({changes: changes, array: c['array'].slice(0), colors: c['colors'], compared:c['compared'], boundaries: c['boundaries']});\r\n                }else{\r\n                    this.setState({changes: [], compared: [], boundaries:[]});\r\n                }\r\n            }else{\r\n                clearInterval(this.state.timer);\r\n                this.setState({compared:[], boundaries:[], isAnimating:false, timer: null});\r\n            }\r\n        }, this.state.speed);\r\n        \r\n      }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.timer = null;\r\n    }\r\n\r\n    handleStop = () =>{\r\n        clearInterval(this.state.timer);\r\n        this.setState({timer:null});\r\n    }\r\n\r\n    bubbleSort = () =>{\r\n        let array = this.state.array.slice(0);\r\n        let colors = this.state.colors.slice(0);\r\n        let state = [];\r\n        for(let i = 0; i < array.length - 1; i++){\r\n          for(let j = 0; j < array.length - i - 1; j++){\r\n            let change = { \r\n              compared: [j, j + 1],\r\n              swapped: false,\r\n              array: array.slice(0),\r\n              colors: colors.slice(0),\r\n              boundaries:[]\r\n            };\r\n            if(array[j] > array[j + 1]){\r\n              change.swapped = true;\r\n              let temp = array[j]; \r\n              array[j] = array[j + 1]; \r\n              array[j + 1] = temp; \r\n\r\n              let tempc = colors[j]; \r\n              colors[j] = colors[j + 1]; \r\n              colors[j + 1] = tempc; \r\n\r\n              change.colors = colors.slice(0);\r\n              change.array = array.slice(0);\r\n            }\r\n            state.push(change);\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true, colors: colors});\r\n        }\r\n      }\r\n\r\n      mergeSort = () =>{\r\n        let state = [];\r\n        let array = this.state.array.slice(0);\r\n        let colors = this.state.colors.slice(0);\r\n        this.mergeSortRecur(array.slice(0), array, 0, array.length - 1, state);\r\n        let change = { \r\n            compared: [0, array.length - 1],\r\n            swapped: false,\r\n            array: array.slice(0),\r\n            colors: this.state.colors.slice(0),\r\n            boundaries: [0, Math.floor((0 + array.length - 1)/2), array.length - 1]\r\n          };\r\n          state.push(change);\r\n        this.setState({changes: state, isSorting: false, isAnimating:true, colors: colors});\r\n      }\r\n\r\n      mergeSortRecur = (tempArr, arr, begin, end, state) =>{\r\n          if(begin >= end) return;\r\n          let middle = Math.floor((begin + end) / 2);\r\n          this.mergeSortRecur(tempArr, arr, begin, middle, state);\r\n          this.mergeSortRecur(tempArr, arr, middle + 1, end, state);\r\n          this.merge(tempArr, arr, begin, middle + 1, end, state);\r\n          let change = { \r\n            compared: [begin, end],\r\n            swapped: false,\r\n            array: tempArr.slice(0),\r\n            colors: this.state.colors.slice(0),\r\n            boundaries: []\r\n          };\r\n          state.push(change);\r\n      }\r\n\r\n      merge = (temp, arr, left, mid, right, state) =>{\r\n        const left1 = left;\r\n        const right1 = right;\r\n        let leftEnd = mid - 1;\r\n        //let rightStart = leftEnd + 1;\r\n        let size = right - left + 1;\r\n        let index = left;\r\n\r\n        while(left <= leftEnd && mid <= right){\r\n            let change = { \r\n                compared: [],\r\n                swapped: false,\r\n                array: arr.slice(0),\r\n                colors: this.state.colors.slice(0),\r\n                boundaries: [left1, mid, right1]\r\n              };\r\n\r\n            if(arr[left] <= arr[mid]){\r\n                change.swapped = true;\r\n                temp[index] = arr[left];\r\n                change.compared = [left, mid];\r\n                change.array = temp.slice(0);\r\n                index++;\r\n                left++;\r\n            }\r\n            else{\r\n                change.swapped = true;\r\n                temp[index] = arr[mid];\r\n                change.compared = [mid, right];\r\n                change.array = temp.slice(0);;\r\n                index++;\r\n                mid++;\r\n            }  \r\n            state.push(change);\r\n        }\r\n        while(left <= leftEnd)\r\n            temp[index++] = arr[left++];\r\n        \r\n        while(mid <= right)\r\n            temp[index++] = arr[mid++];\r\n        for(let i = 0; i < size; i++)\r\n            arr[right] = temp[right--];\r\n      }\r\n\r\n      getMaxIndex = () =>{\r\n          if(this.state.compared.length > 0){\r\n              let index1 = this.state.compared[0];\r\n              let index2 = this.state.compared[1];\r\n              return this.state.array[index1] > this.state.array[index2] ? index1 : index2;\r\n          }\r\n          return -1;\r\n      }\r\n      selectionSort = () =>{\r\n          let state = [];\r\n          let array = this.state.array.slice(0);\r\n          for(let i = 0; i < array.length - 1; i++){\r\n              let minIndex = i;\r\n              for(let j = i + 1; j < array.length; j++){\r\n                if(array[j] < array[minIndex])\r\n                    minIndex = j;\r\n              }\r\n              \r\n              let temp = array[i];\r\n              array[i] = array[minIndex];\r\n              array[minIndex] = temp;\r\n\r\n              let change = { \r\n                compared: [i, minIndex],\r\n                swapped: false,\r\n                array: array.slice(0),\r\n                boundaries:[]\r\n              };\r\n              state.push(change);\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true});\r\n      }\r\n\r\n      insertionSort = () =>{\r\n          let state = [];\r\n          let array = this.state.array.slice(0);\r\n          for(let i = 1 ; i < array.length; i++){\r\n            let j = i;\r\n              while(j > 0 && array[j -1] > array[j]){\r\n                  let temp = array[j];\r\n                  array[j] = array[j - 1];\r\n                  array[j -1] = temp;\r\n                  j--;\r\n                  let change = { \r\n                    compared: [j-1, j],\r\n                    swapped: false,\r\n                    array: array.slice(0),\r\n                    boundaries:[]\r\n                  };\r\n                  state.push(change);\r\n              }\r\n              \r\n\r\n          }\r\n          this.setState({changes: state, isSorting: false, isAnimating:true});\r\n      }\r\n\r\n     randomColor(num) {\r\n     \r\n        // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\r\n        // Adam Cole, 2011-Sept-14\r\n        // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n        var r, g, b;\r\n        var h = Math.ceil(Math.random() * 10000) / Math.ceil(Math.random() * 9799);\r\n        var i = ~~(h * 6);\r\n        var f = h * 6 - i;\r\n        var q = 1 - f;\r\n        switch(i % 6){\r\n            case 0: r = 1; g = f; b = 0; break;\r\n            case 1: r = q; g = 1; b = 0; break;\r\n            case 2: r = 0; g = 1; b = f; break;\r\n            case 3: r = 0; g = q; b = 1; break;\r\n            case 4: r = f; g = 0; b = 1; break;\r\n            case 5: r = 1; g = 0; b = q; break;\r\n        }\r\n        var c = \"#\" + (\"00\" + (~ ~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 255)).toString(16)).slice(-2);\r\n        return (c);\r\n    }\r\n\r\n    handleSort = (sortType) => {\r\n        switch(sortType){\r\n            case 'Bubble Sort':\r\n                this.bubbleSort();\r\n                break;\r\n            case 'Merge Sort':\r\n                this.mergeSort();\r\n                break;\r\n            case 'Selection Sort':\r\n                this.selectionSort();\r\n                break;\r\n            case 'Insertion Sort':\r\n                this.insertionSort();\r\n                break;\r\n        }\r\n        this.animate();\r\n    }\r\n    onSortComplete = () =>{\r\n        this.setState({});\r\n    }\r\n    valueLabelComponent(props) {\r\n        const { children, open, value } = props;\r\n      \r\n        return (\r\n          <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n          </Tooltip>\r\n        );\r\n    }\r\n\r\n    generateArray(size){\r\n        let array = [];\r\n        for(let i = 0; i < size; i++){\r\n          array.push(Math.ceil(Math.random() * (125 - 50) + 50));\r\n        }\r\n        return array;\r\n    }\r\n\r\n    generateNewArray = () =>{\r\n        let array = this.generateArray(this.state.arraySize);\r\n        this.setState(\r\n        {\r\n            array: array,\r\n            colors: array.map((k,ki)=> {return this.randomColor();})\r\n        });\r\n    }\r\n    onSpeedChange = (e, newValue) =>{\r\n        this.setState({speed: 2000-newValue})\r\n    }\r\n\r\n    handleSliderChange = (e, newValue) =>{\r\n        let array = this.generateArray(newValue);\r\n        this.setState({\r\n            array: array,\r\n            arraySize: newValue,\r\n            colors: array.map((k,ki)=> {return this.randomColor();})\r\n        });\r\n    }\r\n    handleSortComplete = ()=>{\r\n        this.setState({isSorting: false, shouldSort: false})\r\n    }\r\n    handleSpeedChange = (e, newValue) =>{\r\n        console.log(newValue)\r\n        this.setState({speed: newValue});\r\n    }\r\n    render(){\r\n        // console.log({\"render\":this.props.sort})\r\n        const boundaries = this.state.boundaries == undefined ? [] : this.state.boundaries;\r\n        return (<div className=\"element-container\">\r\n            <div className='controls'>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <Typography>Array Size</Typography>\r\n                    <Slider\r\n                        ValueLabelComponent={this.valueLabelComponent}\r\n                        className=\"slider-comp\"\r\n                        aria-label=\"custom thumb label\"\r\n                        disabled={this.state.isAnimating}\r\n                        defaultValue={5}\r\n                        onChange={this.handleSliderChange}\r\n                        min={5}\r\n                        max={200}\r\n                        style={{marginLeft:\"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Typography>Speed</Typography>\r\n                    <Slider\r\n                        ValueLabelComponent={this.valueLabelComponent}\r\n                        className=\"slider-comp\"\r\n                        disabled={this.state.isAnimating}\r\n                        aria-label=\"custom thumb label\"\r\n                        defaultValue={500}\r\n                        onChange={this.onSpeedChange}\r\n                        min={1}\r\n                        max={2000}\r\n                        style={{marginLeft:\"5px\"}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <SplitButton \r\n                    disabled={this.state.isAnimating}\r\n                    handleSort={this.handleSort} \r\n                    onGenerateNewArray={this.generateNewArray} \r\n                    onStop={this.handleStop}/>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            <div >\r\n                <div className='elements'>\r\n                {this.state.array.map((k,ki)=>{\r\n                    return <Element key={ki} number={k} \r\n                    width={(document.body.clientWidth / (this.state.array.length * 1.95))/10} \r\n                    total={this.state.array.length}\r\n                    color = {this.props.multicolor? this.state.colors[ki]: '#f36698'}\r\n                    border={!this.props.multicolor}\r\n                    compared={new Set(this.state.compared).has(ki)}\r\n                    sortingIndex={this.getMaxIndex() == ki}\r\n                    boundaries={boundaries.length > 0 ? (ki >= boundaries[0] && ki <= boundaries[2]) : false}\r\n                    />\r\n                    \r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n\r\n      \r\n   \r\n   \r\n}\r\nexport default ElementContainer;","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport './App.css';\r\nimport Navbar from './components/navbar/navbar.component'\r\nimport ElementContainer from './components/element-container/element-container.component'\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  \r\n\r\n  \r\n  \r\n  render(){\r\n    console.log('render app')\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar onSort={this.handleSort} onGenerateNewArray={this.generateNewArray} onSliderChange={this.handleSliderChange} onSpeedChange={this.handleSpeedChange}/>\r\n        <Container maxWidth={false}>\r\n          <ElementContainer multicolor={false}/>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}